(()=>{"use strict";function t(t){if(!t)throw new Error("Invalid modal state object passed to toggleModalState function.");if(!t.closeButtonState)throw new Error("Invalid close button state object passed to toggleModalState function.");t.listenerAttached=!t.listenerAttached,t.closeButtonState.listenerAttached=!t.closeButtonState.listenerAttached}function e(t){"true"===t.getAttribute("aria-hidden")?(t.setAttribute("aria-hidden","false"),t.setAttribute("aria-modal","true")):(t.setAttribute("aria-hidden","true"),t.setAttribute("aria-modal","false"))}function n(t){t.forEach((function(t){var e=Math.random();t.style.transform=e>=0&&e<.25?"translate(".concat(Math.floor(333*Math.random()),"px, ").concat(Math.floor(333*Math.random()),"px)"):e>=.25&&e<.5?"translate(".concat(Math.floor(-333*Math.random()),"px, ").concat(Math.floor(-333*Math.random()),"px)"):e>=.5&&e<.75?"translate(".concat(Math.floor(333*Math.random()),"px, ").concat(Math.floor(-333*Math.random()),"px)"):"translate(".concat(Math.floor(-333*Math.random()),"px, ").concat(Math.floor(333*Math.random()),"px)")}))}function o(){var t=document.querySelectorAll(".character.non-whitespace");!function(t){document.querySelector("#open-modal-button").addEventListener("click",(function(){t.forEach((function(t){return t.style.transform="translate(0, 0)"}))}))}(t),function(t){document.querySelector(".ds-close-button").addEventListener("click",(function(){n(t)}))}(t)}function a(){var t,e,o,a,r,c,i=document.querySelector("#c-container"),l=i.querySelector("pre"),s=(t=l,"character",(e=document.createElement("pre")).appendChild((o=t,"character",a=document.createDocumentFragment(),o.textContent.split("").forEach((function(t,e){var n=document.createElement("span");n.setAttribute("id","".concat("character","-").concat(e+1)),n.classList.add("character"),n.textContent=" "===t?" ":t,a.appendChild(n)})),a)),e);r=s,c=l,i.replaceChild(r,c),n(function(t){for(var e=[],n=0;n<t.children.length;n++){var o=t.children[n];""!==o.textContent.trim()&&e.push(o)}return e.forEach((function(t){return t.classList.add("non-whitespace")})),e}(s))}a(),window.addEventListener("load",o),a(),window.addEventListener("load",o);var r=function(n){var o;!function(t){if(!t)throw new Error("Invalid argument passed to dsCreateDialogController function.");if(!(t instanceof HTMLElement))throw new Error("The provided argument is not a valid HTML element.");if("DIALOG"!==t.tagName)throw new Error("The element you passed in is not a dialog element.")}(n),(o=n).setAttribute("aria-modal","false"),o.setAttribute("aria-hidden","true");var a,r=(a=n).id?"#".concat(a.id):a.className?".".concat(a.className.split(" ").join(".")):"specified element",c=n.querySelector(".ds-close-button");(function(t,e){if(!t)throw new Error("Close button not found for the modal element: ".concat(e,"… Double check to ensure it has a class of '.ds-close-button'."));if("BUTTON"!==t.tagName)throw new Error("The close button for the modal element: ".concat(e," is not a button element."))})(c,r),function(t){t.setAttribute("aria-label","Close Dialog")}(c);var i={listenerAttached:!1,closeButtonState:{listenerAttached:!1}},l=function o(){n.classList.remove("closing"),n.close(),e(n),c.removeEventListener("click",s),n.removeEventListener("animationend",o),t(i)},s=function(){n.classList.add("closing"),n.addEventListener("animationend",l)};return{openDialog:function(){!function(){if(n.open)throw new Error("The following dialog is already open: ".concat(r,"."));if(i.listenerAttached)throw new Error("A listener is already attached to this dialog element: ".concat(r,"."));if(i.closeButtonState.listenerAttached)throw new Error("A listener is already attached to the close button of the dialog element: ".concat(r,"."))}(),n.showModal(),e(n),c.addEventListener("click",s),t(i)},closeDialog:s}}(document.querySelector("dialog"));document.querySelector("#open-modal-button").addEventListener("click",(function(){r.openDialog()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,