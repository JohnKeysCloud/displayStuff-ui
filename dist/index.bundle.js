(()=>{"use strict";function t(t,e,n){var o=function(t){"Escape"===t.key&&n.open&&(t.preventDefault(),e.click())};t?window.removeEventListener("keydown",o):window.addEventListener("keydown",o)}function e(t,e,n){t?e.removeEventListener("click",n):e.addEventListener("click",n)}function n(t){if(!t)throw new Error("Invalid modal state object passed to toggleModalState function.");t.open=!t.open,t.listenerAttached=!t.listenerAttached,t.escapeKeyListenerAttached=!t.escapeKeyListenerAttached,t.closeButtonState.listenerAttached=!t.closeButtonState.listenerAttached}function o(t){"true"===t.getAttribute("aria-hidden")?(t.setAttribute("aria-hidden","false"),t.setAttribute("aria-modal","true")):(t.setAttribute("aria-hidden","true"),t.setAttribute("aria-modal","false"))}function a(t){t.forEach((function(t){var e=Math.random();t.style.transform=e>=0&&e<.25?"translate(".concat(Math.floor(333*Math.random()),"px, ").concat(Math.floor(333*Math.random()),"px)"):e>=.25&&e<.5?"translate(".concat(Math.floor(-333*Math.random()),"px, ").concat(Math.floor(-333*Math.random()),"px)"):e>=.5&&e<.75?"translate(".concat(Math.floor(333*Math.random()),"px, ").concat(Math.floor(-333*Math.random()),"px)"):"translate(".concat(Math.floor(-333*Math.random()),"px, ").concat(Math.floor(333*Math.random()),"px)")}))}var r,c,i,l,s,d,u,h,f;u=document.querySelector("#c-container"),h=u.querySelector("pre"),r=h,(c=document.createElement("pre")).appendChild((i=r,l=document.createDocumentFragment(),i.textContent.split("").forEach((function(t,e){var n=document.createElement("span");n.setAttribute("id","".concat("character","-").concat(e+1)),n.classList.add("character"),n.textContent=" "===t?" ":t,l.appendChild(n)})),l)),s=f=c,d=h,u.replaceChild(s,d),a(function(t){for(var e=[],n=0;n<t.children.length;n++){var o=t.children[n];""!==o.textContent.trim()&&e.push(o)}return e.forEach((function(t){return t.classList.add("non-whitespace")})),e}(f)),window.addEventListener("load",(function(){var t=document.querySelectorAll(".character.non-whitespace");!function(t){document.querySelector("#open-modal-button").addEventListener("click",(function(){t.forEach((function(t){return t.style.transform="translate(0, 0)"}))}))}(t),function(t){document.querySelector(".ds-close-button").addEventListener("click",(function(){a(t)}))}(t)}));var m=function(a){var r;!function(t){if(!t)throw new Error("Invalid argument passed to dsCreateDialogController function.");if(!(t instanceof HTMLElement))throw new Error("The provided argument is not a valid HTML element.");if("DIALOG"!==t.tagName)throw new Error("The element you passed in is not a dialog element.")}(a),(r=a).setAttribute("aria-modal","false"),r.setAttribute("aria-hidden","true");var c=function(t){return t.id?"#".concat(t.id):t.className?".".concat(t.className.split(" ").join(".")):"specified element"}(a),i=a.querySelector(".ds-close-button");(function(t,e){if(!t)throw new Error("Close button not found for the modal element: ".concat(e,"… Double check to ensure it has a class of '.ds-close-button'."));if("BUTTON"!==t.tagName)throw new Error("The close button for the modal element: ".concat(e," is not a button element."))})(i,c),function(t){t.setAttribute("aria-label","Close Dialog")}(i);var l={open:!1,listenerAttached:!1,escapeKeyListenerAttached:!1,closeButtonState:{listenerAttached:!1}},s=function r(){a.classList.remove("closing"),a.close(),o(a),e(l.closeButtonState.listenerAttached,i,d),t(l.escapeKeyListenerAttached,i,l),a.removeEventListener("animationend",r),n(l)},d=function(){a.classList.add("closing"),a.addEventListener("animationend",s)};return{openDialog:function(){!function(){if(a.open)throw new Error("The following dialog is already open: ".concat(c,"."));if(l.listenerAttached)throw new Error("A listener is already attached to this dialog element: ".concat(c,"."));if(l.closeButtonState.listenerAttached)throw new Error("A listener is already attached to the close button of the dialog element: ".concat(c,"."))}(),a.showModal(),o(a),e(l.closeButtonState.listenerAttached,i,d),t(l.escapeKeyListenerAttached,i,l),n(l)},closeDialog:d}}(document.querySelector("dialog"));document.querySelector("#open-modal-button").addEventListener("click",(function(){m.openDialog()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,