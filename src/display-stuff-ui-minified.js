function dsGetSelector(e) { return e.id ? `#${e.id}` : e.className ? `.${e.className.split(" ").join(".")}` : "specified element" } function initializeCloseButton(e) { e.setAttribute("aria-label", "Close Dialog") } function examineCloseButton(e, t) { if (!e) throw new Error(`Close button not found for the modal element: ${t}â€¦ Double check to ensure it has a class of '.ds-close-button'.`); if ("BUTTON" !== e.tagName) throw new Error(`The close button for the modal element: ${t} is not a button element.`) } function toggleEscapeKeyListener(e, t) { const o = e => { "Escape" === e.key && modalState.open && (e.preventDefault(), t.click()) }; e ? window.removeEventListener("keydown", o) : window.addEventListener("keydown", o) } function toggleCloseButtonListener(e, t, o) { e ? t.removeEventListener("click", o) : t.addEventListener("click", o) } function toggleModalState(e) { if (!e) throw new Error("Invalid modal state object passed to toggleModalState function."); e.open = !e.open, e.listenerAttached = !e.listenerAttached, e.escapeKeyListenerAttached = !e.escapeKeyListenerAttached, e.closeButtonState.listenerAttached = !e.closeButtonState.listenerAttached } function toggleModalAttributes(e) { "true" === e.getAttribute("aria-hidden") ? (e.setAttribute("aria-hidden", "false"), e.setAttribute("aria-modal", "true")) : (e.setAttribute("aria-hidden", "true"), e.setAttribute("aria-modal", "false")) } function initializeAsModal(e) { e.setAttribute("aria-modal", "false"), e.setAttribute("aria-hidden", "true") } export function dsCreateDialogController(e) { !function (e) { if (!e) throw new Error("Invalid argument passed to dsCreateDialogController function."); if (!(e instanceof HTMLElement)) throw new Error("The provided argument is not a valid HTML element."); if ("DIALOG" !== e.tagName) throw new Error("The element you passed in is not a dialog element.") }(e), initializeAsModal(e); const t = dsGetSelector(e), o = e.querySelector(".ds-close-button"); examineCloseButton(o, t), initializeCloseButton(o); let n = { open: !1, listenerAttached: !1, escapeKeyListenerAttached: !1, closeButtonState: { listenerAttached: !1 } }; const i = () => { e.classList.remove("closing"), e.close(), toggleModalAttributes(e), toggleCloseButtonListener(n.closeButtonState.listenerAttached, o, a), toggleEscapeKeyListener(n.escapeKeyListenerAttached, o), e.removeEventListener("animationend", i), toggleModalState(n) }, a = () => { e.classList.add("closing"), e.addEventListener("animationend", i) }; return { openDialog: () => { (() => { if (e.open) throw new Error(`The following dialog is already open: ${t}.`); if (n.listenerAttached) throw new Error(`A listener is already attached to this dialog element: ${t}.`); if (n.closeButtonState.listenerAttached) throw new Error(`A listener is already attached to the close button of the dialog element: ${t}.`) })(), e.showModal(), toggleModalAttributes(e), toggleCloseButtonListener(n.closeButtonState.listenerAttached, o, a), toggleEscapeKeyListener(n.escapeKeyListenerAttached, o), toggleModalState(n) }, closeDialog: a } } export function dsCreateLightboxController(e) { !function () { if (!e) throw new Error("Invalid argument passed to dsCreateDialogController function."); if (!(e instanceof HTMLElement)) throw new Error("The provided argument is not a valid HTML element.") }(), initializeAsModal(e); const t = dsGetSelector(e), o = e.querySelector(".ds-close-button"); examineCloseButton(o, t), initializeCloseButton(o); let n = { modalOpen: !1, listenerAttached: !1, escapeKeyListenerAttached: !1, closeButtonState: { listenerAttached: !1 } }; const i = () => { e.classList.remove("closing"), e.classList.remove("visible"), toggleModalAttributes(e), toggleCloseButtonListener(n.closeButtonState.listenerAttached, o, a), toggleEscapeKeyListener(n.escapeKeyListenerAttached, o), e.removeEventListener("animationend", i), toggleModalState(n) }, a = () => { e.classList.add("closing"), e.addEventListener("animationend", i) }; return { openLightbox: () => { (() => { if (e.classList.contains("visible")) throw new Error(`The following lightbox is already visible: ${t}.`); if (n.listenerAttached) throw new Error(`A listener is already attached to the lightbox element: ${t}.`); if (n.closeButtonState.listenerAttached) throw new Error(`A listener is already attached to the close button of the lightbox: ${t}.`) })(), e.classList.add("visible"), toggleModalAttributes(e), toggleCloseButtonListener(n.closeButtonState.listenerAttached, o, a), toggleEscapeKeyListener(n.escapeKeyListenerAttached, o), toggleModalState(n) }, closeLightbox: a } }